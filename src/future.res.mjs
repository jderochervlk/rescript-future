// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Webapi__Fetch from "rescript-webapi/src/Webapi/Webapi__Fetch.res.mjs";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function make(lazyPromise, controller) {
  var cancelled = {
    contents: false
  };
  return {
          value: (function () {
              var tmp;
              try {
                tmp = lazyPromise();
              }
              catch (raw_e){
                var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                tmp = new Promise((function (param, rej) {
                        rej(e);
                      }));
              }
              return tmp.then(function (t) {
                            return {
                                    TAG: "Ok",
                                    _0: t
                                  };
                          }).catch(function (e) {
                          return {
                                  TAG: "Error",
                                  _0: e
                                };
                        });
            }),
          cancelled: cancelled,
          controller: {
            contents: controller
          }
        };
}

function map(future, fn) {
  return {
          value: (function () {
              return future.value().then(function (t) {
                          if (typeof t !== "object") {
                            return "Cancelled";
                          } else if (t.TAG === "Ok") {
                            if (future.cancelled.contents === true) {
                              return "Cancelled";
                            } else {
                              return {
                                      TAG: "Ok",
                                      _0: fn(t._0)
                                    };
                            }
                          } else if (future.cancelled.contents === true) {
                            return "Cancelled";
                          } else {
                            return {
                                    TAG: "Error",
                                    _0: t._0
                                  };
                          }
                        });
            }),
          cancelled: future.cancelled,
          controller: future.controller
        };
}

function mapError(future, fn) {
  return {
          value: (function () {
              return future.value().then(function (t) {
                          if (typeof t !== "object") {
                            return "Cancelled";
                          } else if (t.TAG === "Ok") {
                            if (future.cancelled.contents === true) {
                              return "Cancelled";
                            } else {
                              return {
                                      TAG: "Ok",
                                      _0: t._0
                                    };
                            }
                          } else if (future.cancelled.contents === true) {
                            return "Cancelled";
                          } else {
                            return {
                                    TAG: "Error",
                                    _0: fn(t._0)
                                  };
                          }
                        });
            }),
          cancelled: future.cancelled,
          controller: future.controller
        };
}

function mapPromise(future, fn) {
  return {
          value: (function () {
              return future.value().then(function (t) {
                          if (typeof t !== "object") {
                            return "Cancelled";
                          } else if (t.TAG === "Ok") {
                            return fn(t._0).then(function (t) {
                                          if (future.cancelled.contents === true) {
                                            return "Cancelled";
                                          } else {
                                            return {
                                                    TAG: "Ok",
                                                    _0: t
                                                  };
                                          }
                                        }).catch(function (e) {
                                        return {
                                                TAG: "Error",
                                                _0: e
                                              };
                                      });
                          } else if (future.cancelled.contents === true) {
                            return "Cancelled";
                          } else {
                            return {
                                    TAG: "Error",
                                    _0: t._0
                                  };
                          }
                        });
            }),
          cancelled: future.cancelled,
          controller: future.controller
        };
}

function flatMap(future, fn) {
  return {
          value: (function () {
              return future.value().then(function (t) {
                          if (typeof t !== "object") {
                            return "Cancelled";
                          } else if (t.TAG === "Ok") {
                            if (future.cancelled.contents === true) {
                              return "Cancelled";
                            } else {
                              return fn(t._0);
                            }
                          } else if (future.cancelled.contents === true) {
                            return "Cancelled";
                          } else {
                            return {
                                    TAG: "Error",
                                    _0: t._0
                                  };
                          }
                        });
            }),
          cancelled: future.cancelled,
          controller: future.controller
        };
}

function fold(future, errorFn, successFn) {
  return future.value().then(function (t) {
              if (typeof t !== "object") {
                return ;
              } else if (t.TAG === "Ok") {
                return successFn(t._0);
              } else {
                return errorFn(t._0);
              }
            });
}

function run(future) {
  return future.value();
}

function cancel(future) {
  Core__Option.forEach(future.controller.contents, (function (prim) {
          prim.abort();
        }));
  future.cancelled.contents = true;
}

function reset(future) {
  future.controller.contents = new AbortController();
  future.cancelled.contents = false;
}

function all2(param) {
  var two = param[1];
  var one = param[0];
  return {
          value: (function () {
              return Promise.all([
                            one.value(),
                            two.value()
                          ]).then(function (t) {
                          var a = t[0];
                          if (typeof a === "object") {
                            if (a.TAG === "Ok") {
                              var b = t[1];
                              if (typeof b === "object" && b.TAG === "Ok") {
                                return {
                                        TAG: "Ok",
                                        _0: [
                                          a._0,
                                          b._0
                                        ]
                                      };
                              }
                              
                            } else {
                              var b$1 = t[1];
                              var a$1 = a._0;
                              if (typeof b$1 !== "object" || b$1.TAG === "Ok") {
                                return {
                                        TAG: "Error",
                                        _0: [
                                          Caml_option.some(a$1),
                                          undefined
                                        ]
                                      };
                              } else {
                                return {
                                        TAG: "Error",
                                        _0: [
                                          Caml_option.some(a$1),
                                          Caml_option.some(b$1._0)
                                        ]
                                      };
                              }
                            }
                          }
                          var b$2 = t[1];
                          if (typeof b$2 !== "object" || b$2.TAG === "Ok") {
                            return "Cancelled";
                          } else {
                            return {
                                    TAG: "Error",
                                    _0: [
                                      undefined,
                                      Caml_option.some(b$2._0)
                                    ]
                                  };
                          }
                        });
            }),
          cancelled: one.cancelled,
          controller: one.controller
        };
}

function all3(param) {
  var three = param[2];
  var two = param[1];
  var one = param[0];
  return {
          value: (function () {
              return Promise.all([
                            one.value(),
                            two.value(),
                            three.value()
                          ]).then(function (t) {
                          var a = t[0];
                          var exit = 0;
                          if (typeof a !== "object") {
                            exit = 1;
                          } else if (a.TAG === "Ok") {
                            var b = t[1];
                            if (typeof b !== "object" || b.TAG !== "Ok") {
                              exit = 1;
                            } else {
                              var c = t[2];
                              if (typeof c !== "object") {
                                exit = 1;
                              } else {
                                if (c.TAG === "Ok") {
                                  return {
                                          TAG: "Ok",
                                          _0: [
                                            a._0,
                                            b._0,
                                            c._0
                                          ]
                                        };
                                }
                                exit = 1;
                              }
                            }
                          } else {
                            var b$1 = t[1];
                            var a$1 = a._0;
                            var exit$1 = 0;
                            if (typeof b$1 !== "object" || b$1.TAG === "Ok") {
                              exit$1 = 2;
                            } else {
                              var c$1 = t[2];
                              if (typeof c$1 !== "object") {
                                exit$1 = 2;
                              } else {
                                if (c$1.TAG !== "Ok") {
                                  return {
                                          TAG: "Error",
                                          _0: [
                                            Caml_option.some(a$1),
                                            Caml_option.some(b$1._0),
                                            Caml_option.some(c$1._0)
                                          ]
                                        };
                                }
                                exit$1 = 2;
                              }
                            }
                            if (exit$1 === 2) {
                              return {
                                      TAG: "Error",
                                      _0: [
                                        Caml_option.some(a$1),
                                        undefined,
                                        undefined
                                      ]
                                    };
                            }
                            
                          }
                          if (exit === 1) {
                            var b$2 = t[1];
                            var exit$2 = 0;
                            if (typeof b$2 !== "object") {
                              exit$2 = 2;
                            } else {
                              if (b$2.TAG !== "Ok") {
                                return {
                                        TAG: "Error",
                                        _0: [
                                          undefined,
                                          Caml_option.some(b$2._0),
                                          undefined
                                        ]
                                      };
                              }
                              exit$2 = 2;
                            }
                            if (exit$2 === 2) {
                              var c$2 = t[2];
                              if (typeof c$2 !== "object" || c$2.TAG === "Ok") {
                                return "Cancelled";
                              } else {
                                return {
                                        TAG: "Error",
                                        _0: [
                                          undefined,
                                          undefined,
                                          Caml_option.some(c$2._0)
                                        ]
                                      };
                              }
                            }
                            
                          }
                          
                        });
            }),
          cancelled: one.cancelled,
          controller: one.controller
        };
}

function $$fetch$1(string) {
  var controller = new AbortController();
  var init = Webapi__Fetch.RequestInit.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(controller.signal), undefined);
  return make((function () {
                return fetch(string, init);
              }), controller);
}

function fetchWithInit(string, init, controller) {
  return make((function () {
                return fetch(string, init);
              }), controller);
}

function fetchWithRequest(request) {
  var controller = new AbortController();
  var init = Webapi__Fetch.RequestInit.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(controller.signal), undefined);
  return make((function () {
                return fetch(request, init);
              }), controller);
}

function fetchWithRequestInit(request, init, controller) {
  return make((function () {
                return fetch(request, init);
              }), controller);
}

export {
  make ,
  map ,
  mapError ,
  mapPromise ,
  flatMap ,
  fold ,
  run ,
  cancel ,
  reset ,
  all2 ,
  all3 ,
  $$fetch$1 as $$fetch,
  fetchWithInit ,
  fetchWithRequest ,
  fetchWithRequestInit ,
}
/* No side effect */
